<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="F:\项目\知识管理\trunk\tools\NUnit-2.5.7.10213\bin\net-2.0\tests\nunit.framework.tests.dll" total="1176" errors="1" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2010-08-05" time="00:21:12">
  <environment nunit-version="2.5.7.10213" clr-version="2.0.50727.3603" os-version="Microsoft Windows NT 5.1.2600 Service Pack 3" platform="Win32NT" cwd="F:\项目\知识管理\trunk\tools\NUnit-2.5.7.10213\bin\net-2.0\tests" machine-name="JZP" user="Administrator" user-domain="JZP" />
  <culture-info current-culture="zh-CN" current-uiculture="zh-CN" />
  <test-suite type="Assembly" name="F:\项目\知识管理\trunk\tools\NUnit-2.5.7.10213\bin\net-2.0\tests\nunit.framework.tests.dll" executed="False" result="Cancelled">
    <results>
      <test-suite type="Namespace" name="NUnit" executed="False" result="Cancelled">
        <results>
          <test-suite type="Namespace" name="Framework" executed="False" result="Cancelled">
            <results>
              <test-suite type="Namespace" name="Constraints" executed="True" result="Success" success="True" time="8.563" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AfterConstraintTest" executed="True" result="Success" success="True" time="6.250" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadDelegates" executed="True" result="Success" success="True" time="1.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.FailsWithBadDelegates(NUnit.Framework.Constraints.ActualValueDelegate)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.FailsWithBadDelegates(NUnit.Framework.Constraints.ActualValueDelegate)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="1.500" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.FailsWithBadValues(0)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="1.516" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ProvidesProperFailureMessage(0,&quot;0&quot;)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.SimpleTest" executed="True" result="Success" success="True" time="0.594" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.SimpleTestUsingReference" executed="True" result="Success" success="True" time="0.609" asserts="1" />
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodDelegates" executed="True" result="Success" success="True" time="0.500" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.SucceedsWithGoodDelegates(NUnit.Framework.Constraints.ActualValueDelegate)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.500" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.500" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ThatOverload_DoesNotAcceptNegativeDelayValues" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.AfterConstraintTest.ThatOverload_ZeroDelayIsAllowed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AllItemsTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange_UsingComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange_UsingIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRange_UsingIComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInRangeFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInstancesOfType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreInstancesOfTypeFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AllItemsTests.AllItemsAreNotNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndTest" executed="True" result="Success" success="True" time="0.078" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AndTest.CanCombineTestsWithAndOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AndTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AndTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AndTest.FailsWithBadValues(37)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AndTest.FailsWithBadValues(53)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.063" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AndTest.ProvidesProperFailureMessage(37,&quot;37&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AndTest.ProvidesProperFailureMessage(53,&quot;53&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AndTest.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableFromTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AssignableFromTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AssignableFromTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableFromTest.FailsWithBadValues(NUnit.Framework.Constraints.D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableFromTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.D2,&quot;&lt;NUnit.Framework.Constraints.D2&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableFromTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AssignableFromTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableToTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AssignableToTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AssignableToTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableToTest.FailsWithBadValues(NUnit.Framework.Constraints.B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableToTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.B,&quot;&lt;NUnit.Framework.Constraints.B&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AssignableToTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.AssignableToTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeExistsConstraintTest" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.AttributeExistsOnMethodInfo" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.AttributeTestPropertyValueOnMethodInfo" description="my description" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.FailsWithBadValues(NUnit.Framework.Constraints.D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.NonAttributeThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.D2,&quot;&lt;NUnit.Framework.Constraints.D2&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.AttributeExistsConstraintTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.AttributeExistsConstraintTest)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinarySerializableTest" executed="True" result="Success" success="True" time="0.047" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.InternalClass)" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.InternalClass,&quot;&lt;InternalClass&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(&quot;a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.BinarySerializableTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.InternalWithSerializableAttributeClass)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfArray" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfArrayList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfCollectionNotImplementingIList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.CanTestContentsOfSortedList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionContainsTests.IgnoreCaseIsHonored" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionEquivalentTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EqualCollectionsAreEquivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentFailsWithDuplicateElementInActual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentFailsWithDuplicateElementInExpected" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentHonorsIgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.EquivalentIgnoresOrder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionEquivalentTests.WorksWithCollectionsOfArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTests" executed="True" result="Success" success="True" time="0.125" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Allows_adjacent_equal_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_AtLeastOneArgMustImplementIComparable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Fails" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Handles_custom_comparison" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Handles_custom_comparison2" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_Handles_null" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrdered_TypesMustBeComparable" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedBy" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedBy_Comparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedBy_Handles_heterogeneous_classes_as_long_as_the_property_is_of_same_type" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedDescending" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.IsOrderedDescending_2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.078" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.CollectionOrderedTests.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ComparerTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="EqualItems" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4.0f,4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4,4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4.0f,4)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4.0f,4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4,4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4.0d,4)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4.0d,4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4,4)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.EqualItems(4.0d,4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SpecialFloatingPointValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.SpecialFloatingPointValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.SpecialFloatingPointValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.SpecialFloatingPointValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.SpecialFloatingPointValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.SpecialFloatingPointValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.SpecialFloatingPointValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="UnequalItems" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4.0f,2.0f)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4,2)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4,2.0f)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4.0d,2)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4.0d,2.0f)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4.0f,2)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4.0f,2.0d)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4,null)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4,null)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4,2.0d)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                          <test-case name="NUnit.Framework.Constraints.ComparerTests.UnequalItems(4.0d,2.0d)" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmptyConstraintTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(System.Object[],&quot;&lt; 1, 2, 3 &gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Object[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.Generic.List`1[System.Int32])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EndsWithTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EndsWithTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;hello there&quot;,&quot;\&quot;hello there\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTest.SucceedsWithGoodValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTestIgnoringCase" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;hello there&quot;,&quot;\&quot;hello there\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;HELLO&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EndsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;I said Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualConstraintTest" executed="True" result="Success" success="True" time="0.109" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDates" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinDays" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinHours" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinMilliseconds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinMinutes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinSeconds" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinTicks" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDatesWithinTimeSpan" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="CanMatchDoublesWithRelativeTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDoublesWithRelativeTolerance(9500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDoublesWithRelativeTolerance(10000.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDoublesWithRelativeTolerance(10500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchDoublesWithUlpTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchDoublesWithUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchSinglesWithRelativeTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSinglesWithRelativeTolerance(9500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSinglesWithRelativeTolerance(10500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSinglesWithRelativeTolerance(10000.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchSinglesWithUlpTolerance" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSinglesWithUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchSpecialFloatingPointValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSpecialFloatingPointValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSpecialFloatingPointValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSpecialFloatingPointValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSpecialFloatingPointValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSpecialFloatingPointValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchSpecialFloatingPointValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.CanMatchTimeSpanWithinMinutes" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfDaysPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfHoursPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfMillisecondsPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfMinutesPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfPercentPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfSecondsPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfTicksPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfUlpsIsUsedOnDecimal" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ErrorIfUlpsIsUsedOnIntegralType" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfUlpsIsUsedOnIntegralType(1000UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorIfUlpsPrecedesWithin" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorWithPercentAndUlpsToleranceModes" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ErrorWithUlpsAndPercentToleranceModes" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-suite type="ParameterizedTest" name="FailsOnDoublesOutsideOfRelativeTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnDoublesOutsideOfRelativeTolerance(8500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnDoublesOutsideOfRelativeTolerance(11500.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsOnDoublesOutsideOfUlpTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsOnSinglesOutsideOfRelativeTolerance" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnSinglesOutsideOfRelativeTolerance(8500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnSinglesOutsideOfRelativeTolerance(11500.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsOnSinglesOutsideOfUlpTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsWithBadValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.FailsWithBadValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ProvidesProperFailureMessage(double.NaN,&quot;NaN&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.SucceedsWithGoodValues(4.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.SucceedsWithGoodValues(4.0d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.SucceedsWithGoodValues(4.0000m)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.UsesProvidedEqualityComparer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.UsesProvidedEqualityComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.EqualTest.FailedStringMatchShowsFailurePosition" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncated" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtBothEndsIfNecessary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtFrontEndIfNecessary" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.EqualTest.TestPropertyWithPrivateSetter" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactTypeTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ExactTypeTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ExactTypeTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ExactTypeTest.FailsWithBadValues(NUnit.Framework.Constraints.B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ExactTypeTest.FailsWithBadValues(NUnit.Framework.Constraints.D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ExactTypeTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.B,&quot;&lt;NUnit.Framework.Constraints.B&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ExactTypeTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.D2,&quot;&lt;NUnit.Framework.Constraints.D2&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ExactTypeTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FalseConstraintTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FloatingPointNumericsTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.DoubleEqualityWithUlps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.FloatEqualityWithUlps" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredDoubleReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredFloatReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredIntegerReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredLongReinterpretation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanOrEqualTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.CanCompareIComparables" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.FailsWithBadValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.SucceedsWithGoodValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanOrEqualTest.SucceedsWithGoodValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.CanCompareIComparables" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.FailsWithBadValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.016" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.SucceedsWithGoodValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.GreaterThanTest.SucceedsWithGoodValues(5.001d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTypeTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.InstanceOfTypeTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.InstanceOfTypeTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeTest.FailsWithBadValues(NUnit.Framework.Constraints.B)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.B,&quot;&lt;NUnit.Framework.Constraints.B&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.D1)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.InstanceOfTypeTest.SucceedsWithGoodValues(NUnit.Framework.Constraints.D2)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanOrEqualTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.CanCompareIComparables" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.FailsWithBadValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.ProvidesProperFailureMessage(6,&quot;6&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanOrEqualTest.SucceedsWithGoodValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.CanCompareIComparables" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.CanCompareIComparablesOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.ComparisonConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.ComparisonConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.ComparisonConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.LessThanTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.FailsWithBadValues(6)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.FailsWithBadValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.ProvidesProperFailureMessage(6,&quot;6&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.ProvidesProperFailureMessage(5,&quot;5&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.SucceedsWithGoodValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.LessThanTest.SucceedsWithGoodValues(4.999d)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MsgUtilTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsDoNotFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringTailsFitInLine" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="EscapeControlCharsTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n&quot;,&quot;\\n\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r&quot;,&quot;\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\b&quot;,&quot;\\b&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\f&quot;,&quot;\\f&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t\n&quot;,&quot;\\t\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n&quot;,&quot;\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n\n&quot;,&quot;\\n\\n\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2029&quot;,&quot;\\x2029&quot;)" description="Paragraph separator character" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r\r&quot;,&quot;\\r\\r\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\n&quot;,&quot;\\r\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\r&quot;,&quot;\\n\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;This is a\rtest message&quot;,&quot;This is a\\rtest message&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(null,null)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t&quot;,&quot;\\t&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r&quot;,&quot;\\r\\r&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\\r\\n&quot;,&quot;\\\\r\\\\n&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\a&quot;,&quot;\\a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\v&quot;,&quot;\\v&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x0085&quot;,&quot;\\x0085&quot;)" description="Next line character" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2028&quot;,&quot;\\x2028&quot;)" description="Line separator character" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="TestClipString" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStartAndEnd" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.NoClippingNeeded" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtEnd" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStart" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NaNConstraintTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.PositiveInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.NegativeInfinity)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(42,&quot;42&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.PositiveInfinity,&quot;Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.NegativeInfinity,&quot;-Infinity&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(double.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(float.NaN)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NotTest.CanUseNotOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NotTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.NotTest.NotHonorsIgnoreCaseUsingConstructors" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotTest.NotHonorsIgnoreCaseUsingPrefixNotation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NotTest.NotHonorsTolerance" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NotTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NotTest.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NotTest.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullConstraintTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullConstraintTest.SucceedsWithGoodValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullOrEmptyStringConstraintTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.InvalidDataThrowsArgumentException(5)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NumericsTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithoutToleranceMode" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithPercentage" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-suite type="ParameterizedTest" name="CanMatchIntegralsWithPercentage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500L)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000L)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500L)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500UL)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000UL)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500UL)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CanMatchWithoutToleranceMode" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.568f)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789UL)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789L)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.5678d)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalAbovePercentage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalBelowPercentage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsOnIntegralsOutsideOfPercentage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500L)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500UL)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.OrTest.CanCombineTestsWithOrOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.OrTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.OrTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.OrTest.FailsWithBadValues(37)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.OrTest.ProvidesProperFailureMessage(37,&quot;37&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.OrTest.SucceedsWithGoodValues(99)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.OrTest.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExistsTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Int32)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.InvalidDataThrowsException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(42,&quot;&lt;System.Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Collections.ArrayList,&quot;&lt;System.Collections.ArrayList&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Int32,&quot;&lt;System.Int32&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Int32[])" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Array)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsException" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(42)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.PropertyTest.PropertyEqualToValueWithTolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(System.Int32[],&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;7&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(System.Int32[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RangeConstraintTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.FailsWithBadValues(4)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.FailsWithBadValues(43)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.InvalidDataThrowsArgumentException(&quot;xxx&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.ProvidesProperFailureMessage(4,&quot;4&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.ProvidesProperFailureMessage(43,&quot;43&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.SucceedsWithGoodValues(5)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.SucceedsWithGoodValues(23)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.SucceedsWithGoodValues(42)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.UsesProvidedComparerOfT" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.UsesProvidedComparisonOfT" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Constraints.RangeConstraintTest.UsesProvidedIComparer" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ReusableConstraintTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanCreateReusableConstraintByImplicitConversion" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-suite type="Theory" name="CanReuseReusableConstraintMultipleTimes" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;empty&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;null&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;property Length &lt;greaterthan 3&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                          <test-case name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;and &lt;property Length &lt;equal 4&gt;&gt; &lt;startswith &quot;te&quot;&gt;&gt;)" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SameAsTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(3)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(System.Object,&quot;&lt;System.Object&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(3,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SameAsTest.SucceedsWithGoodValues(System.Object)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_Linux" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_Windows" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_Linux" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder2/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/Folder1/File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./folder2/../File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder2/file.tmp&quot;,&quot;\&quot;/folder2/file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../file.temp&quot;,&quot;\&quot;/folder1/./folder2/../file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/File.TMP&quot;,&quot;\&quot;/Folder1/File.TMP\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./folder2/../File.TMP&quot;,&quot;\&quot;/FOLDER1/./folder2/../File.TMP\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/../file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/../file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_Windows" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(123)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder2\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder2\\file.tmp&quot;,&quot;\&quot;C:\\folder2\\file.tmp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\..\\file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\folder2\\..\\File.TMP&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/file.tmp&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.StartsWithTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.StartsWithTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;HELLO THERE&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;HELLO THERE&quot;,&quot;\&quot;HELLO THERE\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;I said hello&quot;,&quot;\&quot;I said hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;say hello to fred&quot;,&quot;\&quot;say hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTest.SucceedsWithGoodValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTestIgnoringCase" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;say Hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;I said hello&quot;,&quot;\&quot;I said hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;say Hello to fred&quot;,&quot;\&quot;say Hello to fred\&quot;&quot;)" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.StartsWithTestIgnoringCase.SucceedsWithGoodValues(&quot;HELLO there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTest" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SubstringTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SubstringTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;HELLO&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;HELLO&quot;,&quot;\&quot;HELLO\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;hello there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;I said hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTest.SucceedsWithGoodValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTestIgnoringCase" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(&quot;goodbye&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(&quot;What the hell?&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;\&quot;goodbye\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;What the hell?&quot;,&quot;\&quot;What the hell?\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(&quot;&quot;,&quot;&lt;string.Empty&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;Hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;HellO there&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;I said HELLO&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.SubstringTestIgnoringCase.SucceedsWithGoodValues(&quot;say hello to fred&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsConstraintTest_ExactType" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsConstraintTest_InstanceOfType" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ArgumentException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsConstraintTest_WithConstraint" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.016" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ToStringTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplayPrefixConstraints_Resolved" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Resolved" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Unresolved" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_Resolved" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_UnResolved" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.ToStringTests.DisplayPrefixConstraints_Unresolved" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TrueConstraintTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(null)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(&quot;hello&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlSerializableTest" executed="True" result="Success" success="True" time="1.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ConstraintTestBaseNoData.ProvidesProperDescription" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="FailsWithBadValues" executed="True" result="Success" success="True" time="0.391" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.FailsWithBadValues(System.Collections.Generic.Dictionary`2[System.String,System.String])" executed="True" result="Success" success="True" time="0.297" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.InternalClass)" executed="True" result="Success" success="True" time="0.078" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.FailsWithBadValues(NUnit.Framework.Constraints.InternalWithSerializableAttributeClass)" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="InvalidDataThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.InvalidDataThrowsArgumentException(null)" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ProvidesProperFailureMessage" executed="True" result="Success" success="True" time="0.031" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ProvidesProperFailureMessage(System.Collections.Generic.Dictionary`2[System.String,System.String],&quot;&lt;Dictionary`2&gt;&quot;)" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.InternalClass,&quot;&lt;InternalClass&gt;&quot;)" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.ProvidesProperFailureMessage(NUnit.Framework.Constraints.InternalWithSerializableAttributeClass,&quot;&lt;InternalWithSerializableAttributeClass&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="SucceedsWithGoodValues" executed="True" result="Success" success="True" time="0.547" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.SucceedsWithGoodValues(1)" executed="True" result="Success" success="True" time="0.063" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.SucceedsWithGoodValues(&quot;a&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="NUnit.Framework.Constraints.XmlSerializableTest.SucceedsWithGoodValues(System.Collections.ArrayList)" executed="True" result="Success" success="True" time="0.484" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Syntax" executed="True" result="Success" success="True" time="4.984" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="AfterSyntaxUsingActualPassedByRef" executed="True" result="Success" success="True" time="1.422" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.EqualToTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.GreaterTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.HasMemberTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.NullTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.SameAsTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TextTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TrueTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterSyntaxUsingAnonymousDelegates" executed="True" result="Success" success="True" time="1.422" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.EqualToTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.GreaterTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.HasMemberTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.NullTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.SameAsTest" executed="True" result="Success" success="True" time="0.188" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TextTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TrueTest" executed="True" result="Success" success="True" time="0.203" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterTest_AndOperator" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterTest_ProperyTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AfterTest_SimpleConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AllTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndIsEvaluatedBeforeFollowingOr" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndIsEvaluatedBeforePrecedingOr" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndOperatorOverride" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AndTest_ThreeAndsWithNot" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ArbitraryConstraintMatching" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintAfterPrefix" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintsUnderAndOperator" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchPredicate" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableFromTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableFromTest_Generic" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableToTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssignableToTest_Generic" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AtLeastTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AtMostTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeTest_Generic" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AttributeTestWithFollowingConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="BinarySerializableTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionContainsTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionEquivalentTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionMemberTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest_Comparer" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest_Comparer_Descending" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedByTest_Descending" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest_Comparer" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest_Comparer_Descending" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionOrderedTest_Descending" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionSubsetTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CountTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EmptyTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EndsWithTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualityTests" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsUsingDefaultFloatingPointTolerance" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixedFloatAndDouble" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixingTypesGenerally" executed="True" result="Success" success="True" time="0.000" asserts="7" />
                      <test-case name="NUnit.Framework.Syntax.EqualityTests.SimpleEqualityTests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualToTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualToTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="EqualToTest_WithinTolerance" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactTypeTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ExactTypeTest_Generic" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="FalseTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanOrEqualTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="GreaterThanTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTest_Generic" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTypeTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InstanceOfTypeTest_Generic" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="InvalidCodeTests" executed="True" result="Success" success="True" time="1.656" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="CodeShouldNotCompile" executed="True" result="Success" success="True" time="1.047" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.And.Throws&quot;)" executed="True" result="Success" success="True" time="0.313" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.All&quot;)" executed="True" result="Success" success="True" time="0.156" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.Not&quot;)" executed="True" result="Success" success="True" time="0.141" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Not.Null.GreaterThan(10))&quot;)" executed="True" result="Success" success="True" time="0.141" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.And&quot;)" executed="True" result="Success" success="True" time="0.156" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.All.And.And&quot;)" executed="True" result="Success" success="True" time="0.141" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="CodeShouldNotCompileAsFinishedConstraint" executed="True" result="Success" success="True" time="0.609" asserts="0">
                        <results>
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not&quot;)" executed="True" result="Success" success="True" time="0.156" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All&quot;)" executed="True" result="Success" success="True" time="0.156" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not.All&quot;)" executed="True" result="Success" success="True" time="0.141" asserts="1" />
                          <test-case name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All.Not&quot;)" executed="True" result="Success" success="True" time="0.156" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LengthTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanOrEqualTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="LessThanTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MessageTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="MixedOperatorOverrides" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.MixedOperatorOverrides.ComplexTests" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NaNTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NoneTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotOperatorOverride" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathOrUnderTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathOrUnderTest_RespectCase" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotSamePathTest_RespectCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NotTest_Cascaded" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="NullTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OperatorPrecedenceTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.SomeTests" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.OperatorPrecedenceTests.WithTests" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrOperatorOverride" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="OrTest_ThreeOrs" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExistsTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyExistsTest_AndFollows" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertySyntaxVariations" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.ExistenceTest" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Syntax.PropertySyntaxVariations.SeparateConstraintTest" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyTest_ConstraintFollows" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="PropertyTest_NotFollows" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RegexTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="RegexTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathOrUnderTest_RespectCase" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SamePathTest_RespectCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest_BeforeBinaryOperators" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest_NestedSome" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SomeTest_UseOfAndSome" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="StartsWithTest_IgnoreCase" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="SubstringTest_IgnoreCase" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextContains" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextEndsWithTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextMatchesTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TextStartsWithTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ThrowsTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.DelegateThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsArgumentException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionInstanceOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOfAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInstanceOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInvalidOperationException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTargetInvocationExceptionWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOf" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithConstraint" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithInnerException" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeofWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TrueTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="UniqueTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="XmlSerializableTest" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByConstraintBuilder" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByInheritedSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByStaticSyntax" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Tests" executed="False" result="Cancelled">
                <results>
                  <test-suite type="TestFixture" name="ArrayEqualsFailureMessageFixture" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ActualArrayIsLonger" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArrayAndCollection_Failure" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysHaveDifferentRanks" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentDimensionsAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentRanksAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DifferentArrayTypesEqualFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DoubleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ExpectedArrayIsLonger" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FailureOnSingleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FiveDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrayComparedToSimpleArray" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrays" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.SameLengthDifferentContent" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.TripleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ArrayEqualsFixture" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayAndCollection" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayIsEqualToItself" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayOfIntAndArrayOfDouble" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDecimal" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDouble" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfInt" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfMixedTypes" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfString" executed="True" result="Success" success="True" time="0.016" asserts="5" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysPassedAsObjects" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentDimensionsMatchedAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentRanksComparedAsCollection" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.DoubleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.FiveDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.JaggedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ArrayEqualsFixture.TripleDimensionedArrays" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ArrayNotEqualFixture" executed="True" result="Success" success="True" time="0.000" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.ArraysDeclaredAsDifferentTypes" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.DifferentLengthArrays" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ArrayNotEqualFixture.SameLengthDifferentContent" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssertThrowsTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.BaseExceptionThrown" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfDerivedType" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfExactType" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchUnspecifiedException" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionIsReturnedToMethod" executed="True" result="Success" success="True" time="0.000" asserts="16" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionThrown" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DerivedExceptionThrown" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowFails" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowSuceeds" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.NoExceptionThrown" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.AssertThrowsTests.UnrelatedExceptionThrown" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="AssumeThatTests" executed="True" result="Success" success="True" time="0.031" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_Boolean" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_Boolean" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraint" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessage" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                      <test-case name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessageAndArgs" executed="True" result="Success" success="True" time="0.000" asserts="0" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="CollectionAssertTest" executed="True" result="Success" success="True" time="0.078" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_HandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFail" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFailCount" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreEquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_HandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Contains_IList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyICollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyIList" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ILIst" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_ICollection" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_IList" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Empty" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EnsureComparerIsUsed" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Equivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailOne" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailTwo" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOfHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Allows_adjacent_equal_values" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_ContainedTypesMustBeCompatible" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison2" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_null" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_TypesMustImplementIComparable" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOfHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNullFailure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfType" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfTypeFailure" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent_Fails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalentHandlesNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithObjects" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithStrings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure" executed="True" result="Success" success="True" time="0.016" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure_WithTwoNulls" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="ConditionAssertTests" executed="True" result="Success" success="True" time="0.016" asserts="0">
                    <results>
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmpty" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyArray" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNullString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalse" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsFalseFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaN" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNaNFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmpty" executed="True" result="Success" success="True" time="0.000" asserts="4" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArray" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArrayList" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyHashTable" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyString" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsNullFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrue" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.ConditionAssertTests.IsTrueFails" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="DirectoryAssertTests" executed="False" result="Cancelled">
                    <results>
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneDoesNotExist" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithDirectoryInfos" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithDirectoryInfos" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithDirectoryInfos" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesIfOneIsNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWhenOneDoesNotExist" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWithStringPath" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithInvalidDirectory" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyThrowsUsingNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithInvalidDirectory" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyThrowsUsingNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithStringPath" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinThrowsWhenBothAreNull" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingDirectoryInfo" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithDirectoryInfo" executed="True" result="Success" success="True" time="0.016" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithStringPath" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithTempPath" executed="False" result="Cancelled">
                        <failure>
                          <message><![CDATA[Test cancelled by user]]></message>
                          <stack-trace><![CDATA[在 System.RuntimeMethodHandle._InvokeMethodFast(Object target, Object[] arguments, SignatureStruct& sig, MethodAttributes methodAttributes, RuntimeTypeHandle typeOwner)
在 System.RuntimeMethodHandle.InvokeMethodFast(Object target, Object[] arguments, Signature sig, MethodAttributes methodAttributes, RuntimeTypeHandle typeOwner)
在 System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture, Boolean skipVisibilityChecks)
在 System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
在 NUnit.Core.Reflect.InvokeMethod(MethodInfo method, Object fixture, Object[] args)
在 NUnit.Core.TestMethod.RunTestMethod(TestResult testResult)
在 NUnit.Core.TestMethod.doTestCase(TestResult testResult)
]]></stack-trace>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>